name: Main workflow
  
on: 
  pull_request:
  push:
  schedule:
    - cron: '17 14 * * *'

jobs:
  test:
    strategy:
      fail-fast: false
        
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Install dependencies
        run: |
          uname -a
          sudo apt-get update
          sudo apt-get install expect mergerfs

      - name: Checkout
        uses: actions/checkout@v2 
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Run tests
        run: |
          uname -a
          sudo apt-get update
          sudo apt-get install strace
          bash ./setup.sh
          bash ./test/run_tests.sh  
          # get the timer
          timer=$(LANG=en_us_88591; date)
          echo "VERSION<<EOF" >> $GITHUB_ENV
          echo "OS:${{matrix.os}}" >> $GITHUB_ENV
          echo "$timer" >> $GITHUB_ENV
          # Parse the results and construct a github message post
          # we append the data to the global env
          cat ./test/results/results.log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      # - name: Comment on PR
      #   uses: actions/github-script@v3
      #   with:
      #     script: |
      #       let body = `${{ env.VERSION }}`
      #       console.log(context)
      #       // if we are directly pushing on main/future, we cannot push comments -> exit
      #       if (context.eventName === "push" && (context.ref === "refs/heads/main" || context.ref === "refs/heads/future")) {
      #         return 0;
      #       }
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: body,
      #       })     
      - name: Exit Code
        run: |
          # check if everything executed without errors
          bash test/exit_code.sh

      - name: Upload script
        uses: actions/upload-artifact@v2
        with:
          name: try
          path: try

  manpage:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false


    steps:
      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install pandoc

      - name: Checkout
        uses: actions/checkout@v2 
        with:
          ref: ${{ github.event.pull_request.head.sha }}
            
      - name: Build manpage
        run: make -C man
  
      - name: Upload script
        uses: actions/upload-artifact@v2
        with:
          name: try.1
          path: man/try.1

  prerelease:
    needs:
      - test
      - manpage
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2

      - name: Collect artifacts
        run: |
            mv try.1/try.1 try/try.1
          
      - name: Deploy 'latest' release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Latest script and manpage"
          files: |
            try/*
